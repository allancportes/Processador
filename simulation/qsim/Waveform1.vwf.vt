// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/23/2019 21:49:01"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Processador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Processador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg check;
reg check1;
reg clockReal;
reg [13:0] switch;
// wires                                               
wire [31:0] DataMemOutput;
wire [4:0] MuxBankOut;
wire [4:0] RegOut1;
wire [4:0] RegOut2;
wire [31:0] ULAout;
wire [31:0] WriteData;
wire [31:0] addressOut;
wire [31:0] resultado;

// assign statements (if any)                          
Processador i1 (
// port map - connection between master ports and signals/registers   
	.DataMemOutput(DataMemOutput),
	.MuxBankOut(MuxBankOut),
	.RegOut1(RegOut1),
	.RegOut2(RegOut2),
	.ULAout(ULAout),
	.WriteData(WriteData),
	.addressOut(addressOut),
	.check(check),
	.check1(check1),
	.clockReal(clockReal),
	.resultado(resultado),
	.switch(switch)
);
initial 
begin 
#1000000 $finish;
end 

// clockReal
always
begin
	clockReal = 1'b0;
	clockReal = #2000 1'b1;
	#2000;
end 

// check
initial
begin
	check = 1'b1;
end 

// check1
initial
begin
	check1 = 1'b0;
end 
// switch[ 13 ]
initial
begin
	switch[13] = 1'b0;
end 
// switch[ 12 ]
initial
begin
	switch[12] = 1'b0;
end 
// switch[ 11 ]
initial
begin
	switch[11] = 1'b0;
end 
// switch[ 10 ]
initial
begin
	switch[10] = 1'b0;
end 
// switch[ 9 ]
initial
begin
	switch[9] = 1'b0;
end 
// switch[ 8 ]
initial
begin
	switch[8] = 1'b0;
end 
// switch[ 7 ]
initial
begin
	switch[7] = 1'b0;
end 
// switch[ 6 ]
initial
begin
	switch[6] = 1'b0;
end 
// switch[ 5 ]
initial
begin
	switch[5] = 1'b0;
end 
// switch[ 4 ]
initial
begin
	switch[4] = 1'b0;
end 
// switch[ 3 ]
initial
begin
	switch[3] = 1'b1;
	switch[3] = #30000 1'b0;
end 
// switch[ 2 ]
initial
begin
	switch[2] = 1'b0;
	switch[2] = #260000 1'b1;
end 
// switch[ 1 ]
initial
begin
	switch[1] = 1'b0;
	switch[1] = #30000 1'b1;
	switch[1] = #230000 1'b0;
end 
// switch[ 0 ]
initial
begin
	switch[0] = 1'b0;
	switch[0] = #30000 1'b1;
	switch[0] = #230000 1'b0;
end 
endmodule

