// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/05/2018 22:40:37"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Processador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Processador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] Data;
reg [31:0] WriteData;
reg [9:0] addressIn;
reg clockReal;
// wires                                               
wire [4:0] ALUcode;
wire [31:0] Data1;
wire [31:0] Instruction;
wire [31:0] MUXULAOutput;
wire [31:0] ULAout;
wire zero;

// assign statements (if any)                          
Processador i1 (
// port map - connection between master ports and signals/registers   
	.ALUcode(ALUcode),
	.Data(Data),
	.Data1(Data1),
	.Instruction(Instruction),
	.MUXULAOutput(MUXULAOutput),
	.ULAout(ULAout),
	.WriteData(WriteData),
	.addressIn(addressIn),
	.clockReal(clockReal),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 

// clockReal
always
begin
	clockReal = 1'b0;
	clockReal = #100000 1'b1;
	#100000;
end 
// addressIn[ 9 ]
initial
begin
	addressIn[9] = 1'b0;
end 
// addressIn[ 8 ]
initial
begin
	addressIn[8] = 1'b0;
end 
// addressIn[ 7 ]
initial
begin
	addressIn[7] = 1'b0;
end 
// addressIn[ 6 ]
initial
begin
	addressIn[6] = 1'b0;
end 
// addressIn[ 5 ]
initial
begin
	addressIn[5] = 1'b0;
end 
// addressIn[ 4 ]
initial
begin
	addressIn[4] = 1'b0;
end 
// addressIn[ 3 ]
initial
begin
	addressIn[3] = 1'b0;
end 
// addressIn[ 2 ]
initial
begin
	addressIn[2] = 1'b0;
end 
// addressIn[ 1 ]
initial
begin
	addressIn[1] = 1'b0;
	addressIn[1] = #500000 1'b1;
end 
// addressIn[ 0 ]
initial
begin
	addressIn[0] = 1'b1;
	addressIn[0] = #500000 1'b0;
end 
// WriteData[ 31 ]
initial
begin
	WriteData[31] = 1'b0;
end 
// WriteData[ 30 ]
initial
begin
	WriteData[30] = 1'b0;
end 
// WriteData[ 29 ]
initial
begin
	WriteData[29] = 1'b0;
end 
// WriteData[ 28 ]
initial
begin
	WriteData[28] = 1'b0;
end 
// WriteData[ 27 ]
initial
begin
	WriteData[27] = 1'b0;
end 
// WriteData[ 26 ]
initial
begin
	WriteData[26] = 1'b0;
end 
// WriteData[ 25 ]
initial
begin
	WriteData[25] = 1'b0;
end 
// WriteData[ 24 ]
initial
begin
	WriteData[24] = 1'b0;
end 
// WriteData[ 23 ]
initial
begin
	WriteData[23] = 1'b0;
end 
// WriteData[ 22 ]
initial
begin
	WriteData[22] = 1'b0;
end 
// WriteData[ 21 ]
initial
begin
	WriteData[21] = 1'b0;
end 
// WriteData[ 20 ]
initial
begin
	WriteData[20] = 1'b0;
end 
// WriteData[ 19 ]
initial
begin
	WriteData[19] = 1'b0;
end 
// WriteData[ 18 ]
initial
begin
	WriteData[18] = 1'b0;
end 
// WriteData[ 17 ]
initial
begin
	WriteData[17] = 1'b0;
end 
// WriteData[ 16 ]
initial
begin
	WriteData[16] = 1'b0;
end 
// WriteData[ 15 ]
initial
begin
	WriteData[15] = 1'b0;
end 
// WriteData[ 14 ]
initial
begin
	WriteData[14] = 1'b0;
end 
// WriteData[ 13 ]
initial
begin
	WriteData[13] = 1'b0;
end 
// WriteData[ 12 ]
initial
begin
	WriteData[12] = 1'b0;
end 
// WriteData[ 11 ]
initial
begin
	WriteData[11] = 1'b0;
end 
// WriteData[ 10 ]
initial
begin
	WriteData[10] = 1'b0;
end 
// WriteData[ 9 ]
initial
begin
	WriteData[9] = 1'b0;
end 
// WriteData[ 8 ]
initial
begin
	WriteData[8] = 1'b0;
end 
// WriteData[ 7 ]
initial
begin
	WriteData[7] = 1'b0;
end 
// WriteData[ 6 ]
initial
begin
	WriteData[6] = 1'b0;
end 
// WriteData[ 5 ]
initial
begin
	WriteData[5] = 1'b0;
end 
// WriteData[ 4 ]
initial
begin
	WriteData[4] = 1'b0;
end 
// WriteData[ 3 ]
initial
begin
	WriteData[3] = 1'b0;
end 
// WriteData[ 2 ]
initial
begin
	WriteData[2] = 1'b0;
end 
// WriteData[ 1 ]
initial
begin
	WriteData[1] = 1'b1;
end 
// WriteData[ 0 ]
initial
begin
	WriteData[0] = 1'b0;
end 
// Data[ 31 ]
initial
begin
	Data[31] = 1'b0;
end 
// Data[ 30 ]
initial
begin
	Data[30] = 1'b0;
end 
// Data[ 29 ]
initial
begin
	Data[29] = 1'b0;
end 
// Data[ 28 ]
initial
begin
	Data[28] = 1'b0;
end 
// Data[ 27 ]
initial
begin
	Data[27] = 1'b0;
end 
// Data[ 26 ]
initial
begin
	Data[26] = 1'b0;
end 
// Data[ 25 ]
initial
begin
	Data[25] = 1'b0;
end 
// Data[ 24 ]
initial
begin
	Data[24] = 1'b0;
end 
// Data[ 23 ]
initial
begin
	Data[23] = 1'b0;
end 
// Data[ 22 ]
initial
begin
	Data[22] = 1'b0;
end 
// Data[ 21 ]
initial
begin
	Data[21] = 1'b0;
end 
// Data[ 20 ]
initial
begin
	Data[20] = 1'b0;
end 
// Data[ 19 ]
initial
begin
	Data[19] = 1'b0;
end 
// Data[ 18 ]
initial
begin
	Data[18] = 1'b0;
end 
// Data[ 17 ]
initial
begin
	Data[17] = 1'b0;
end 
// Data[ 16 ]
initial
begin
	Data[16] = 1'b0;
end 
// Data[ 15 ]
initial
begin
	Data[15] = 1'b0;
end 
// Data[ 14 ]
initial
begin
	Data[14] = 1'b0;
end 
// Data[ 13 ]
initial
begin
	Data[13] = 1'b0;
end 
// Data[ 12 ]
initial
begin
	Data[12] = 1'b0;
end 
// Data[ 11 ]
initial
begin
	Data[11] = 1'b0;
end 
// Data[ 10 ]
initial
begin
	Data[10] = 1'b0;
end 
// Data[ 9 ]
initial
begin
	Data[9] = 1'b0;
end 
// Data[ 8 ]
initial
begin
	Data[8] = 1'b0;
end 
// Data[ 7 ]
initial
begin
	Data[7] = 1'b0;
end 
// Data[ 6 ]
initial
begin
	Data[6] = 1'b0;
end 
// Data[ 5 ]
initial
begin
	Data[5] = 1'b0;
end 
// Data[ 4 ]
initial
begin
	Data[4] = 1'b1;
end 
// Data[ 3 ]
initial
begin
	Data[3] = 1'b0;
end 
// Data[ 2 ]
initial
begin
	Data[2] = 1'b0;
end 
// Data[ 1 ]
initial
begin
	Data[1] = 1'b0;
end 
// Data[ 0 ]
initial
begin
	Data[0] = 1'b0;
end 
endmodule

