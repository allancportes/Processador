// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/13/2018 14:41:30"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          BigMux
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BigMux_vlg_vec_tst();
// constants                                           
// general purpose registers
reg beq;
reg beqz;
reg bneq;
reg [31:0] outputpc;
reg [31:0] regdata;
reg [1:0] selectbm;
reg [31:0] signal;
reg [31:0] sum;
reg zero;
// wires                                               
wire [31:0] outputbm;

// assign statements (if any)                          
BigMux i1 (
// port map - connection between master ports and signals/registers   
	.beq(beq),
	.beqz(beqz),
	.bneq(bneq),
	.outputbm(outputbm),
	.outputpc(outputpc),
	.regdata(regdata),
	.selectbm(selectbm),
	.signal(signal),
	.sum(sum),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 

// beq
initial
begin
	beq = 1'b0;
end 

// beqz
initial
begin
	beqz = 1'b0;
end 

// bneq
initial
begin
	bneq = 1'b1;
end 

// zero
initial
begin
	zero = 1'b0;
end 
// outputpc[ 31 ]
initial
begin
	outputpc[31] = 1'b0;
end 
// outputpc[ 30 ]
initial
begin
	outputpc[30] = 1'b0;
end 
// outputpc[ 29 ]
initial
begin
	outputpc[29] = 1'b0;
end 
// outputpc[ 28 ]
initial
begin
	outputpc[28] = 1'b0;
end 
// outputpc[ 27 ]
initial
begin
	outputpc[27] = 1'b0;
end 
// outputpc[ 26 ]
initial
begin
	outputpc[26] = 1'b0;
end 
// outputpc[ 25 ]
initial
begin
	outputpc[25] = 1'b0;
end 
// outputpc[ 24 ]
initial
begin
	outputpc[24] = 1'b0;
end 
// outputpc[ 23 ]
initial
begin
	outputpc[23] = 1'b0;
end 
// outputpc[ 22 ]
initial
begin
	outputpc[22] = 1'b0;
end 
// outputpc[ 21 ]
initial
begin
	outputpc[21] = 1'b0;
end 
// outputpc[ 20 ]
initial
begin
	outputpc[20] = 1'b0;
end 
// outputpc[ 19 ]
initial
begin
	outputpc[19] = 1'b0;
end 
// outputpc[ 18 ]
initial
begin
	outputpc[18] = 1'b0;
end 
// outputpc[ 17 ]
initial
begin
	outputpc[17] = 1'b0;
end 
// outputpc[ 16 ]
initial
begin
	outputpc[16] = 1'b0;
end 
// outputpc[ 15 ]
initial
begin
	outputpc[15] = 1'b0;
end 
// outputpc[ 14 ]
initial
begin
	outputpc[14] = 1'b0;
end 
// outputpc[ 13 ]
initial
begin
	outputpc[13] = 1'b0;
end 
// outputpc[ 12 ]
initial
begin
	outputpc[12] = 1'b0;
end 
// outputpc[ 11 ]
initial
begin
	outputpc[11] = 1'b0;
end 
// outputpc[ 10 ]
initial
begin
	outputpc[10] = 1'b0;
end 
// outputpc[ 9 ]
initial
begin
	outputpc[9] = 1'b0;
end 
// outputpc[ 8 ]
initial
begin
	outputpc[8] = 1'b0;
end 
// outputpc[ 7 ]
initial
begin
	outputpc[7] = 1'b0;
end 
// outputpc[ 6 ]
initial
begin
	outputpc[6] = 1'b0;
end 
// outputpc[ 5 ]
initial
begin
	outputpc[5] = 1'b0;
end 
// outputpc[ 4 ]
initial
begin
	outputpc[4] = 1'b0;
end 
// outputpc[ 3 ]
initial
begin
	outputpc[3] = 1'b0;
end 
// outputpc[ 2 ]
initial
begin
	outputpc[2] = 1'b0;
end 
// outputpc[ 1 ]
initial
begin
	outputpc[1] = 1'b1;
end 
// outputpc[ 0 ]
initial
begin
	outputpc[0] = 1'b0;
end 
// regdata[ 31 ]
initial
begin
	regdata[31] = 1'b0;
end 
// regdata[ 30 ]
initial
begin
	regdata[30] = 1'b0;
end 
// regdata[ 29 ]
initial
begin
	regdata[29] = 1'b0;
end 
// regdata[ 28 ]
initial
begin
	regdata[28] = 1'b0;
end 
// regdata[ 27 ]
initial
begin
	regdata[27] = 1'b0;
end 
// regdata[ 26 ]
initial
begin
	regdata[26] = 1'b0;
end 
// regdata[ 25 ]
initial
begin
	regdata[25] = 1'b0;
end 
// regdata[ 24 ]
initial
begin
	regdata[24] = 1'b0;
end 
// regdata[ 23 ]
initial
begin
	regdata[23] = 1'b0;
end 
// regdata[ 22 ]
initial
begin
	regdata[22] = 1'b0;
end 
// regdata[ 21 ]
initial
begin
	regdata[21] = 1'b0;
end 
// regdata[ 20 ]
initial
begin
	regdata[20] = 1'b0;
end 
// regdata[ 19 ]
initial
begin
	regdata[19] = 1'b0;
end 
// regdata[ 18 ]
initial
begin
	regdata[18] = 1'b0;
end 
// regdata[ 17 ]
initial
begin
	regdata[17] = 1'b0;
end 
// regdata[ 16 ]
initial
begin
	regdata[16] = 1'b0;
end 
// regdata[ 15 ]
initial
begin
	regdata[15] = 1'b0;
end 
// regdata[ 14 ]
initial
begin
	regdata[14] = 1'b0;
end 
// regdata[ 13 ]
initial
begin
	regdata[13] = 1'b0;
end 
// regdata[ 12 ]
initial
begin
	regdata[12] = 1'b0;
end 
// regdata[ 11 ]
initial
begin
	regdata[11] = 1'b0;
end 
// regdata[ 10 ]
initial
begin
	regdata[10] = 1'b0;
end 
// regdata[ 9 ]
initial
begin
	regdata[9] = 1'b0;
end 
// regdata[ 8 ]
initial
begin
	regdata[8] = 1'b0;
end 
// regdata[ 7 ]
initial
begin
	regdata[7] = 1'b0;
end 
// regdata[ 6 ]
initial
begin
	regdata[6] = 1'b0;
end 
// regdata[ 5 ]
initial
begin
	regdata[5] = 1'b0;
end 
// regdata[ 4 ]
initial
begin
	regdata[4] = 1'b1;
end 
// regdata[ 3 ]
initial
begin
	regdata[3] = 1'b0;
end 
// regdata[ 2 ]
initial
begin
	regdata[2] = 1'b0;
end 
// regdata[ 1 ]
initial
begin
	regdata[1] = 1'b0;
end 
// regdata[ 0 ]
initial
begin
	regdata[0] = 1'b0;
end 
// selectbm[ 1 ]
initial
begin
	selectbm[1] = 1'b0;
end 
// selectbm[ 0 ]
initial
begin
	selectbm[0] = 1'b1;
end 
// signal[ 31 ]
initial
begin
	signal[31] = 1'b0;
end 
// signal[ 30 ]
initial
begin
	signal[30] = 1'b0;
end 
// signal[ 29 ]
initial
begin
	signal[29] = 1'b0;
end 
// signal[ 28 ]
initial
begin
	signal[28] = 1'b0;
end 
// signal[ 27 ]
initial
begin
	signal[27] = 1'b0;
end 
// signal[ 26 ]
initial
begin
	signal[26] = 1'b0;
end 
// signal[ 25 ]
initial
begin
	signal[25] = 1'b0;
end 
// signal[ 24 ]
initial
begin
	signal[24] = 1'b0;
end 
// signal[ 23 ]
initial
begin
	signal[23] = 1'b0;
end 
// signal[ 22 ]
initial
begin
	signal[22] = 1'b0;
end 
// signal[ 21 ]
initial
begin
	signal[21] = 1'b0;
end 
// signal[ 20 ]
initial
begin
	signal[20] = 1'b0;
end 
// signal[ 19 ]
initial
begin
	signal[19] = 1'b0;
end 
// signal[ 18 ]
initial
begin
	signal[18] = 1'b0;
end 
// signal[ 17 ]
initial
begin
	signal[17] = 1'b0;
end 
// signal[ 16 ]
initial
begin
	signal[16] = 1'b0;
end 
// signal[ 15 ]
initial
begin
	signal[15] = 1'b0;
end 
// signal[ 14 ]
initial
begin
	signal[14] = 1'b0;
end 
// signal[ 13 ]
initial
begin
	signal[13] = 1'b0;
end 
// signal[ 12 ]
initial
begin
	signal[12] = 1'b0;
end 
// signal[ 11 ]
initial
begin
	signal[11] = 1'b0;
end 
// signal[ 10 ]
initial
begin
	signal[10] = 1'b0;
end 
// signal[ 9 ]
initial
begin
	signal[9] = 1'b0;
end 
// signal[ 8 ]
initial
begin
	signal[8] = 1'b0;
end 
// signal[ 7 ]
initial
begin
	signal[7] = 1'b0;
end 
// signal[ 6 ]
initial
begin
	signal[6] = 1'b0;
end 
// signal[ 5 ]
initial
begin
	signal[5] = 1'b1;
end 
// signal[ 4 ]
initial
begin
	signal[4] = 1'b0;
end 
// signal[ 3 ]
initial
begin
	signal[3] = 1'b0;
end 
// signal[ 2 ]
initial
begin
	signal[2] = 1'b0;
end 
// signal[ 1 ]
initial
begin
	signal[1] = 1'b0;
end 
// signal[ 0 ]
initial
begin
	signal[0] = 1'b0;
end 
// sum[ 31 ]
initial
begin
	sum[31] = 1'b0;
end 
// sum[ 30 ]
initial
begin
	sum[30] = 1'b0;
end 
// sum[ 29 ]
initial
begin
	sum[29] = 1'b0;
end 
// sum[ 28 ]
initial
begin
	sum[28] = 1'b0;
end 
// sum[ 27 ]
initial
begin
	sum[27] = 1'b0;
end 
// sum[ 26 ]
initial
begin
	sum[26] = 1'b0;
end 
// sum[ 25 ]
initial
begin
	sum[25] = 1'b0;
end 
// sum[ 24 ]
initial
begin
	sum[24] = 1'b0;
end 
// sum[ 23 ]
initial
begin
	sum[23] = 1'b0;
end 
// sum[ 22 ]
initial
begin
	sum[22] = 1'b0;
end 
// sum[ 21 ]
initial
begin
	sum[21] = 1'b0;
end 
// sum[ 20 ]
initial
begin
	sum[20] = 1'b0;
end 
// sum[ 19 ]
initial
begin
	sum[19] = 1'b0;
end 
// sum[ 18 ]
initial
begin
	sum[18] = 1'b0;
end 
// sum[ 17 ]
initial
begin
	sum[17] = 1'b0;
end 
// sum[ 16 ]
initial
begin
	sum[16] = 1'b0;
end 
// sum[ 15 ]
initial
begin
	sum[15] = 1'b0;
end 
// sum[ 14 ]
initial
begin
	sum[14] = 1'b0;
end 
// sum[ 13 ]
initial
begin
	sum[13] = 1'b0;
end 
// sum[ 12 ]
initial
begin
	sum[12] = 1'b0;
end 
// sum[ 11 ]
initial
begin
	sum[11] = 1'b0;
end 
// sum[ 10 ]
initial
begin
	sum[10] = 1'b0;
end 
// sum[ 9 ]
initial
begin
	sum[9] = 1'b0;
end 
// sum[ 8 ]
initial
begin
	sum[8] = 1'b0;
end 
// sum[ 7 ]
initial
begin
	sum[7] = 1'b0;
end 
// sum[ 6 ]
initial
begin
	sum[6] = 1'b0;
end 
// sum[ 5 ]
initial
begin
	sum[5] = 1'b0;
end 
// sum[ 4 ]
initial
begin
	sum[4] = 1'b0;
end 
// sum[ 3 ]
initial
begin
	sum[3] = 1'b1;
end 
// sum[ 2 ]
initial
begin
	sum[2] = 1'b0;
end 
// sum[ 1 ]
initial
begin
	sum[1] = 1'b1;
end 
// sum[ 0 ]
initial
begin
	sum[0] = 1'b0;
end 
endmodule

