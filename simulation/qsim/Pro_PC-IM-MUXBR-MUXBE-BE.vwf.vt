// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/20/2018 16:29:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Processador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Processador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg MUXBEControl;
reg MuxBankSelect;
reg [9:0] adressIn;
reg clockReal;
reg [15:0] switches;
// wires                                               
wire [31:0] BitExtender16_32;
wire [31:0] Instruction;
wire [15:0] MUXBEOut;
wire [4:0] MuxBankOut;

// assign statements (if any)                          
Processador i1 (
// port map - connection between master ports and signals/registers   
	.BitExtender16_32(BitExtender16_32),
	.Instruction(Instruction),
	.MUXBEControl(MUXBEControl),
	.MUXBEOut(MUXBEOut),
	.MuxBankOut(MuxBankOut),
	.MuxBankSelect(MuxBankSelect),
	.adressIn(adressIn),
	.clockReal(clockReal),
	.switches(switches)
);
initial 
begin 
#1000000 $finish;
end 
// adressIn[ 9 ]
initial
begin
	adressIn[9] = 1'b0;
end 
// adressIn[ 8 ]
initial
begin
	adressIn[8] = 1'b0;
end 
// adressIn[ 7 ]
initial
begin
	adressIn[7] = 1'b0;
end 
// adressIn[ 6 ]
initial
begin
	adressIn[6] = 1'b0;
end 
// adressIn[ 5 ]
initial
begin
	adressIn[5] = 1'b0;
end 
// adressIn[ 4 ]
initial
begin
	adressIn[4] = 1'b0;
end 
// adressIn[ 3 ]
initial
begin
	adressIn[3] = 1'b0;
end 
// adressIn[ 2 ]
initial
begin
	adressIn[2] = 1'b0;
end 
// adressIn[ 1 ]
initial
begin
	adressIn[1] = 1'b0;
end 
// adressIn[ 0 ]
initial
begin
	adressIn[0] = 1'b0;
end 
// switches[ 15 ]
initial
begin
	switches[15] = 1'b0;
end 
// switches[ 14 ]
initial
begin
	switches[14] = 1'b0;
end 
// switches[ 13 ]
initial
begin
	switches[13] = 1'b0;
end 
// switches[ 12 ]
initial
begin
	switches[12] = 1'b0;
end 
// switches[ 11 ]
initial
begin
	switches[11] = 1'b0;
end 
// switches[ 10 ]
initial
begin
	switches[10] = 1'b0;
end 
// switches[ 9 ]
initial
begin
	switches[9] = 1'b0;
end 
// switches[ 8 ]
initial
begin
	switches[8] = 1'b0;
end 
// switches[ 7 ]
initial
begin
	switches[7] = 1'b0;
end 
// switches[ 6 ]
initial
begin
	switches[6] = 1'b0;
end 
// switches[ 5 ]
initial
begin
	switches[5] = 1'b0;
end 
// switches[ 4 ]
initial
begin
	switches[4] = 1'b0;
end 
// switches[ 3 ]
initial
begin
	switches[3] = 1'b0;
end 
// switches[ 2 ]
initial
begin
	switches[2] = 1'b0;
end 
// switches[ 1 ]
initial
begin
	switches[1] = 1'b0;
end 
// switches[ 0 ]
initial
begin
	switches[0] = 1'b0;
end 

// clockReal
always
begin
	clockReal = 1'b0;
	clockReal = #50000 1'b1;
	#50000;
end 

// MUXBEControl
initial
begin
	MUXBEControl = 1'b0;
end 
endmodule

