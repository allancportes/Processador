// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/18/2018 20:29:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          BitExtender26
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BitExtender26_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [25:0] DataIn;
// wires                                               
wire [31:0] DataOut;

// assign statements (if any)                          
BitExtender26 i1 (
// port map - connection between master ports and signals/registers   
	.DataIn(DataIn),
	.DataOut(DataOut)
);
initial 
begin 
#1000000 $finish;
end 
// DataIn[ 25 ]
initial
begin
	DataIn[25] = 1'b1;
end 
// DataIn[ 24 ]
initial
begin
	DataIn[24] = 1'b0;
end 
// DataIn[ 23 ]
initial
begin
	DataIn[23] = 1'b0;
end 
// DataIn[ 22 ]
initial
begin
	DataIn[22] = 1'b0;
end 
// DataIn[ 21 ]
initial
begin
	DataIn[21] = 1'b0;
end 
// DataIn[ 20 ]
initial
begin
	DataIn[20] = 1'b0;
end 
// DataIn[ 19 ]
initial
begin
	DataIn[19] = 1'b0;
end 
// DataIn[ 18 ]
initial
begin
	DataIn[18] = 1'b0;
end 
// DataIn[ 17 ]
initial
begin
	DataIn[17] = 1'b0;
end 
// DataIn[ 16 ]
initial
begin
	DataIn[16] = 1'b0;
end 
// DataIn[ 15 ]
initial
begin
	DataIn[15] = 1'b0;
end 
// DataIn[ 14 ]
initial
begin
	DataIn[14] = 1'b0;
end 
// DataIn[ 13 ]
initial
begin
	DataIn[13] = 1'b0;
end 
// DataIn[ 12 ]
initial
begin
	DataIn[12] = 1'b0;
end 
// DataIn[ 11 ]
initial
begin
	DataIn[11] = 1'b0;
end 
// DataIn[ 10 ]
initial
begin
	DataIn[10] = 1'b0;
end 
// DataIn[ 9 ]
initial
begin
	DataIn[9] = 1'b0;
end 
// DataIn[ 8 ]
initial
begin
	DataIn[8] = 1'b0;
end 
// DataIn[ 7 ]
initial
begin
	DataIn[7] = 1'b0;
end 
// DataIn[ 6 ]
initial
begin
	DataIn[6] = 1'b0;
end 
// DataIn[ 5 ]
initial
begin
	DataIn[5] = 1'b0;
end 
// DataIn[ 4 ]
initial
begin
	DataIn[4] = 1'b0;
end 
// DataIn[ 3 ]
initial
begin
	DataIn[3] = 1'b0;
end 
// DataIn[ 2 ]
initial
begin
	DataIn[2] = 1'b0;
end 
// DataIn[ 1 ]
initial
begin
	DataIn[1] = 1'b1;
end 
// DataIn[ 0 ]
initial
begin
	DataIn[0] = 1'b0;
end 
endmodule

