// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/03/2018 15:37:17"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ControlUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ControlUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg check;
reg clock;
reg [5:0] opcode;
// wires                                               
wire [1:0] BIGMUXSelect;
wire MUXDMSelect;
wire MUXULASelect;
wire MuxBankSelect;
wire RegWrite;
wire [4:0] ULAcode;
wire WriteFlag;
wire beq;
wire bneq;
wire hlt;
wire inputControl;
wire jmp;
wire reset;

// assign statements (if any)                          
ControlUnit i1 (
// port map - connection between master ports and signals/registers   
	.BIGMUXSelect(BIGMUXSelect),
	.MUXDMSelect(MUXDMSelect),
	.MUXULASelect(MUXULASelect),
	.MuxBankSelect(MuxBankSelect),
	.RegWrite(RegWrite),
	.ULAcode(ULAcode),
	.WriteFlag(WriteFlag),
	.beq(beq),
	.bneq(bneq),
	.check(check),
	.clock(clock),
	.hlt(hlt),
	.inputControl(inputControl),
	.jmp(jmp),
	.opcode(opcode),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// clock
initial
begin
	clock = 1'b1;
	# 50000;
	repeat(9)
	begin
		clock = 1'b0;
		clock = #50000 1'b1;
		# 50000;
	end
	clock = 1'b0;
end 

// check
initial
begin
	check = 1'b1;
end 
// opcode[ 5 ]
initial
begin
	opcode[5] = 1'b0;
end 
// opcode[ 4 ]
initial
begin
	opcode[4] = 1'b0;
end 
// opcode[ 3 ]
initial
begin
	opcode[3] = 1'b0;
end 
// opcode[ 2 ]
initial
begin
	opcode[2] = 1'b1;
end 
// opcode[ 1 ]
initial
begin
	opcode[1] = 1'b1;
end 
// opcode[ 0 ]
initial
begin
	opcode[0] = 1'b1;
end 
endmodule

