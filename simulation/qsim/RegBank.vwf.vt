// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/11/2018 20:25:06"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RegBank
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RegBank_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] Reg1;
reg [4:0] Reg2;
reg RegWrite;
reg [31:0] WriteData;
reg [4:0] WriteRegister;
reg clock;
// wires                                               
wire [31:0] Data1;
wire [31:0] Data2;

// assign statements (if any)                          
RegBank i1 (
// port map - connection between master ports and signals/registers   
	.Data1(Data1),
	.Data2(Data2),
	.Reg1(Reg1),
	.Reg2(Reg2),
	.RegWrite(RegWrite),
	.WriteData(WriteData),
	.WriteRegister(WriteRegister),
	.clock(clock)
);
initial 
begin 
#1000000 $finish;
end 
// Reg1[ 4 ]
initial
begin
	Reg1[4] = 1'b0;
end 
// Reg1[ 3 ]
initial
begin
	Reg1[3] = 1'b0;
end 
// Reg1[ 2 ]
initial
begin
	Reg1[2] = 1'b0;
end 
// Reg1[ 1 ]
initial
begin
	Reg1[1] = 1'b1;
end 
// Reg1[ 0 ]
initial
begin
	Reg1[0] = 1'b0;
end 
// Reg2[ 4 ]
initial
begin
	Reg2[4] = 1'b0;
end 
// Reg2[ 3 ]
initial
begin
	Reg2[3] = 1'b0;
end 
// Reg2[ 2 ]
initial
begin
	Reg2[2] = 1'b0;
end 
// Reg2[ 1 ]
initial
begin
	Reg2[1] = 1'b0;
end 
// Reg2[ 0 ]
initial
begin
	Reg2[0] = 1'b1;
end 
// WriteData[ 31 ]
initial
begin
	WriteData[31] = 1'b0;
end 
// WriteData[ 30 ]
initial
begin
	WriteData[30] = 1'b0;
end 
// WriteData[ 29 ]
initial
begin
	WriteData[29] = 1'b0;
end 
// WriteData[ 28 ]
initial
begin
	WriteData[28] = 1'b0;
end 
// WriteData[ 27 ]
initial
begin
	WriteData[27] = 1'b0;
end 
// WriteData[ 26 ]
initial
begin
	WriteData[26] = 1'b0;
end 
// WriteData[ 25 ]
initial
begin
	WriteData[25] = 1'b0;
end 
// WriteData[ 24 ]
initial
begin
	WriteData[24] = 1'b0;
end 
// WriteData[ 23 ]
initial
begin
	WriteData[23] = 1'b0;
end 
// WriteData[ 22 ]
initial
begin
	WriteData[22] = 1'b0;
end 
// WriteData[ 21 ]
initial
begin
	WriteData[21] = 1'b0;
end 
// WriteData[ 20 ]
initial
begin
	WriteData[20] = 1'b0;
end 
// WriteData[ 19 ]
initial
begin
	WriteData[19] = 1'b0;
end 
// WriteData[ 18 ]
initial
begin
	WriteData[18] = 1'b0;
end 
// WriteData[ 17 ]
initial
begin
	WriteData[17] = 1'b0;
end 
// WriteData[ 16 ]
initial
begin
	WriteData[16] = 1'b0;
end 
// WriteData[ 15 ]
initial
begin
	WriteData[15] = 1'b0;
end 
// WriteData[ 14 ]
initial
begin
	WriteData[14] = 1'b0;
end 
// WriteData[ 13 ]
initial
begin
	WriteData[13] = 1'b0;
end 
// WriteData[ 12 ]
initial
begin
	WriteData[12] = 1'b0;
end 
// WriteData[ 11 ]
initial
begin
	WriteData[11] = 1'b0;
end 
// WriteData[ 10 ]
initial
begin
	WriteData[10] = 1'b0;
end 
// WriteData[ 9 ]
initial
begin
	WriteData[9] = 1'b0;
end 
// WriteData[ 8 ]
initial
begin
	WriteData[8] = 1'b0;
end 
// WriteData[ 7 ]
initial
begin
	WriteData[7] = 1'b0;
end 
// WriteData[ 6 ]
initial
begin
	WriteData[6] = 1'b0;
end 
// WriteData[ 5 ]
initial
begin
	WriteData[5] = 1'b0;
end 
// WriteData[ 4 ]
initial
begin
	WriteData[4] = 1'b0;
end 
// WriteData[ 3 ]
initial
begin
	WriteData[3] = 1'b1;
	WriteData[3] = #490000 1'b0;
	WriteData[3] = #500000 1'b1;
end 
// WriteData[ 2 ]
initial
begin
	WriteData[2] = 1'b0;
	WriteData[2] = #490000 1'b1;
end 
// WriteData[ 1 ]
initial
begin
	WriteData[1] = 1'b0;
	WriteData[1] = #490000 1'b1;
end 
// WriteData[ 0 ]
initial
begin
	WriteData[0] = 1'b0;
end 
// WriteRegister[ 4 ]
initial
begin
	WriteRegister[4] = 1'b0;
end 
// WriteRegister[ 3 ]
initial
begin
	WriteRegister[3] = 1'b0;
end 
// WriteRegister[ 2 ]
initial
begin
	WriteRegister[2] = 1'b0;
end 
// WriteRegister[ 1 ]
initial
begin
	WriteRegister[1] = 1'b1;
	WriteRegister[1] = #490000 1'b0;
end 
// WriteRegister[ 0 ]
initial
begin
	WriteRegister[0] = 1'b0;
	WriteRegister[0] = #490000 1'b1;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #50000 1'b1;
	#50000;
end 

// RegWrite
initial
begin
	RegWrite = 1'b1;
end 
endmodule

